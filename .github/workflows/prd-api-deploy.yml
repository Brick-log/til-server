name: prd-api-deploy
on:
  push:
    branches: [ "prd" ]
  pull_request:
    branches: [ "prd" ]
    types: [ closed ] # when PR closed
    paths:
      - 'libs/**'
      - 'src/api/**'
      - '.github/workflows/prd-api-deploy.yml'
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Cache gradle modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and Push Docker image to Amazon ECR
        run: ./gradlew :api:jib -Djib.from.image=openjdk:17-jdk-slim -Djib.to.image=${{secrets.ECR_IMAGE}} -Djib.to.auth.username=AWS -Djib.to.auth.password=${{ steps.ecr-login.outputs.ecr-password }} -Djib.to.tags=prd -Djib.container.jvmFlags="-Dspring.profiles.active=prd,-Dfile.encoding=UTF-8" -Djib.container.environment="DATASOURCE_URL=${{ secrets.PRD_DATASOURCE_URL}},DATASOURCE_USERNAME=${{ secrets.PRD_DATASOURCE_USERNAME }},DATASOURCE_PASSWORD=${{ secrets.PRD_DATASOURCE_PASSWORD }},GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }},GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }},GOOGLE_OAUTH_REDIRECT_URI=${{ secrets.GOOGLE_OAUTH_REDIRECT_URI}}"
      - name: Trigger ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER }} --service ${{ secrets.AWS_ECS_SERVICE }} --force-new-deployment
